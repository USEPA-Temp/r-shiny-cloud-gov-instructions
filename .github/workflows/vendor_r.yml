on:
  [push]

jobs:
  download_and_vendor_dependencies:
    runs-on: ubuntu-latest
    name: Compile and vendor R dependencies for cloud.gov
    defaults:
      run:
        working-directory: /workspace
    container:
      image: cloudfoundry/cflinuxfs3
      volumes: 
       - ${{ github.workspace }}:/workspace

    steps:
    - name: Install Image dependencies
      run: |
        apt-get update -y 
        apt-get install -y software-properties-common
        add-apt-repository ppa:git-core/ppa
        apt-get update -y
        apt-get install -y git
        
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Git
      run: |
        git config --global --add safe.directory $(realpath .)
        git config user.name github-actions
        git config user.email github-actions@github.com

    - name: Setup R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: 4.2.2

    - name: Download dependencies
      uses: r-lib/actions/setup-r-dependencies@v2
      with:
        packages: |
          stringr
          devtools

    - name: List R dependencies
      run: |
        sed -n -e 's/^.*- name: //p' r.yml | tr -d '\015' | sed -n -e 'H;${x;s/\n/,/g;s/^,//;p;}' | xargs echo packs= >> $GITHUB_ENV

    - name: Download R packages except sf
      run: |
        if [ -d "vendor_r" ]; then rm -fr vendor_r; fi
        Rscript scripts/download_packages.R vendor_r/src/contrib ${{ env.packs }} >> $GITHUB_ENV

    - name: Add build requirements for sf dependencies
      if: ${{ env.has_sf }} == TRUE
      run: |
        sudo apt-get update -y
        sudo apt-get install -y wget build-essential libreadline-dev libtiff-dev libcurl4-openssl-dev udunits-bin
        wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
        sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'
        sudo apt-get update -y
        sudo apt install -y cmake cmake-curses-gui

    - name: Install GEOS
      if: ${{ env.has_sf }} == TRUE
      run: |
        wget https://download.osgeo.org/geos/geos-3.11.2.tar.bz2
        tar xfj geos-3.11.2.tar.bz2
        cd geos-3.11.2
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ..
        make
        ctest
        make install

    - name: Install sqlite3
      if: ${{ env.has_sf }} == TRUE
      run: |
        wget https://sqlite.org/2023/sqlite-autoconf-3410200.tar.gz
        tar -xf sqlite-autoconf-3410200.tar.gz
        cd sqlite-autoconf-3410200
        ./configure
        make
        apt-get -y purge sqlite3
        make install
        sqlite3 --version
        export PATH="/usr/local/bin:$PATH"
    
    # - name: Install udunits
    #   if: ${{ env.has_sf }} == TRUE
    #   run: |
    #     wget https://downloads.unidata.ucar.edu/udunits/2.2.28/udunits-2.2.28.tar.gz
    #     tar -xf udunits-2.2.28.tar.gz
    #     cd udunits-2.2.28
    #     mkdir build
    #     cd build
    #     cmake ..
    #     cmake --build .
    #     cmake --build . --target install

    - name: Install PROJ
      if: ${{ env.has_sf }} == TRUE
      run: |
        wget https://download.osgeo.org/proj/proj-9.2.0.tar.gz
        tar -xf proj-9.2.0.tar.gz
        cd proj-9.2.0
        mkdir build
        cd build
        cmake ..
        cmake --build .
        cmake --build . --target install
        
    - name: Install GDAL
      if: ${{ env.has_sf }} == TRUE
      run: |
        wget https://github.com/OSGeo/gdal/releases/download/v3.6.3/gdal-3.6.3.tar.gz
        tar -xf gdal-3.6.3.tar.gz
        cd gdal-3.6.3
        mkdir build
        cd build
        cmake ..
        cmake --build .
        cmake --build . --target install

    - name: Build sf package binary
      if: ${{ env.has_sf }} == TRUE
      run: |
        R -e "install.packages(c('sf'), repos = 'https://cloud.r-project.org')"
        Rscript scripts/build_sf.R
        cd vendor_r/src/contrib
        find -name 'sf_*' -print0 | sed -ze "p;s/\_R_x86_64-pc-linux-gnu//" | xargs -0 -n2 mv
        cd ../../..

    - name: Run lib_tar.sh to extract each of the libraries needed by sf
      if: ${{ env.has_sf }} == TRUE
      run: |
        if [ -d "r-lib" ]; then rm -fr r-lib; fi
        mkdir r-lib
        chmod +x scripts/lib_tar.sh
        for L in $LIBS
        do
          find / -iname $L 2>/dev/null | xargs -I {} scripts/lib_tar.sh {}
        done
        for L in $FULLPATH_LIBS
        do
          scripts/lib_tar.sh $L
        done
        scripts/lib_tar.sh 
        git add r-lib
      env:
        LIBS: libudunits2.so.0 libproj.so libgdal.so.32.3.6.3 libsqlite3.so.0
        FULLPATH_LIBS: /usr/local/lib/libgeos_c.so /usr/local/share/proj/proj.db

    - name List files on image
      run: |
        ls -laR /usr/local/lib
        ls -laR /usr/lib
        ls -laR /usr/local/share

    - name: Write package descriptions
      run: |
        Rscript scripts/write_descriptions.R 

    - name: Add additional files to repo if not already there
      run: |
        if [ ! test -f "manifest*.yml" ]; 
          then cp scripts/include/manifest.yml .
          git add manifest.yml
        fi
        if [ ! test -f ".cfignore" ]; 
          then cp scripts/include/.cfignore .
          git add .cfignore
        fi
        if [ ! test -f "shiny.R" ]; 
          then cp scripts/include/shiny.R .
          git add shiny.R
        fi

    - name: Commit & Push
      if: ${{ success() }}
      run: |
        git add vendor_r
        git commit -m "Automated workflow from GitHub Actions to vendor R dependencies"
        git push
